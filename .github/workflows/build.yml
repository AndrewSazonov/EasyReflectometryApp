name: build macOS, Linux, Windows

on: [push, pull_request]

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    timeout-minutes: 40

    runs-on: ${{ matrix.os }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ matrix.os }}
      cancel-in-progress: true

    strategy:
      matrix:
        os: [windows-2019, macos-11]

    steps:
      - name: Check-out EasyReflectometry repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.5.0
        with:
            python-version: 3.9

      - name: Upgrade PIP
        run: python -m pip install --upgrade pip

      - name: Create and activate venv
        run: |
          python -m venv env
          source env/bin/activate

      - name: Install with EasyReflectometry dependencies
        run: pip install '.[ci]'

      - name: Declare env variables on push only
        if: github.event_name == 'push'
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Declare env variables on pull_request only
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$GITHUB_HEAD_REF" >> $GITHUB_ENV

      - name: Add extra info to pyproject.toml
        run: |
          python utils.py --update

      # https://docs.github.com/en/actions/reference/environment-variables
      - name: Declare env variables on push and pull_request
        shell: bash
        run: |
          echo "APP_NAME=$(python utils.py --get project.name)" >> $GITHUB_ENV
          echo "RELEASE_TAG=$(python utils.py --get ci.git.release_tag)" >> $GITHUB_ENV
          echo "RELEASE_TITLE=$(python utils.py --get ci.git.release_title)" >> $GITHUB_ENV
          echo "SCRIPTS_PATH=$(python utils.py --get ci.subdirs.scripts)" >> $GITHUB_ENV
          echo "DISTRIBUTION_PATH=$(python utils.py --get ci.subdirs.distribution)" >> $GITHUB_ENV
          echo "DOWNLOAD_PATH=$(python utils.py --get ci.subdirs.download)" >> $GITHUB_ENV
          echo "QTIFW_PATH=$(python utils.py --get ci.qtifw.installation_path.${{ runner.os }})" >> $GITHUB_ENV
          echo "PYTHON_PACKAGES_PATH=$(python utils.py --get ci.paths.python_packages_path)" >> $GITHUB_ENV
          echo "GIT_INSTALL_URL=git+ssh://git@github.com/$GITHUB_REPOSITORY@${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          cat $GITHUB_ENV

      # - name: Cache dependencies
      #   if: False  # disable caching
      #   uses: actions/cache@v2
      #   id: cache
      #   with:
      #     path: |
      #       ${{ env.DOWNLOAD_PATH }}
      #       ${{ env.QTIFW_PATH }}
      #       ${{ env.PYTHON_PACKAGES_PATH }}
      #     key: ${{ matrix.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Create freezed python app bundle
        run: python ${{ env.SCRIPTS_PATH }}/FreezeApp.py

      - name: Create offline app installers
        run: python ${{ env.SCRIPTS_PATH }}/MakeInstaller.py ${{ secrets.BINARY_SIGN_WIN }} ${{ secrets.CERT_ZIP_PASS }}

      - name: Create online app installers
        if: github.event_name == 'push' && env.BRANCH_NAME == 'master'
        run: python ${{ env.SCRIPTS_PATH }}/MakeOnlineInstaller.py ${{ secrets.BINARY_SIGN_WIN }} ${{ secrets.CERT_ZIP_PASS }}

      # - name: Sign the installer
      #   run: python ${{ env.SCRIPTS_PATH }}/Signatures.py ${{ secrets.BINARY_SIGN_WIN }} ${{ secrets.CERT_ZIP_PASS }}

      - name: Set up screen recording dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080
          system_profiler SPDisplaysDataType | grep Resolution

      - name: Set up screen recording dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          Set-DisplayResolution -Width 1920 -Height 1080 -Force
          Get-DisplayResolution

      - name: Install app
        run: python ${{ env.SCRIPTS_PATH }}/InstallApp.py

      - name: Run app in testmode and quit
        run: python ${{ env.SCRIPTS_PATH }}/RunApp.py --testmode

      - name: Create zip archive of offline app installer
        run: python ${{ env.SCRIPTS_PATH }}/ZipArtifacts.py ${{ env.BRANCH_NAME }}

      - name: Upload installer to artifacts
        uses: actions/upload-artifact@v3
        if: runner.os == 'macOS'
        with:
          name: macOS
          path: "${{ env.DISTRIBUTION_PATH }}/${{ env.APP_NAME }}_macOS_*.zip"
      
      - name: Upload installer to artifacts
        uses: actions/upload-artifact@v3
        if: runner.os == 'Windows'
        with:
          name: windows
          path: "${{ env.DISTRIBUTION_PATH }}/${{ env.APP_NAME }}_Windows_*.zip"
      
      - name: Upload zipped offline app installer to GitHub releases (master branch)
        if: github.event_name == 'push' && env.BRANCH_NAME == 'master'
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: true
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "${{ env.DISTRIBUTION_PATH }}/${{ env.APP_NAME }}_*.zip"
          tag: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_TITLE }}
          bodyFile: "RELEASE.md"

      - name: Upload online app installer to repository via FTP
        if: github.event_name == 'push' && env.BRANCH_NAME == 'master'
        run: python ${{ env.SCRIPTS_PATH }}/UploadToFtp.py ${{ env.BRANCH_NAME }} ${{ secrets.APP_REPO_FTP_PASSWORD }}
